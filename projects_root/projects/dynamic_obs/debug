i = 1, t = 2:


1.  ******* self._init_act_seq ******** (curobo/src/curobo/wrap/wrap_mpc.py)
wrapMpc (row 43 (before optimization, row 67 after optimization)._init_act (="seed") = 
before optimization (row 43):
self._init_act_seq = 
tensor([[[ 0.0301,  0.1668,  0.2621, -0.0876,  0.0543, -0.2581,  0.6257],
         [ 0.0225,  0.2237,  0.3065, -0.1760,  0.1414, -0.2844,  0.5963],
         [ 0.0189,  0.2542,  0.3537, -0.2585,  0.2039, -0.3026,  0.5624],
         [ 0.0185,  0.2617,  0.4017, -0.3339,  0.2440, -0.3135,  0.5246],
         [ 0.0210,  0.2497,  0.4491, -0.4009,  0.2639, -0.3178,  0.4836],
         [ 0.0258,  0.2217,  0.4940, -0.4580,  0.2656, -0.3164,  0.4400],
         [ 0.0324,  0.1812,  0.5349, -0.5041,  0.2515, -0.3101,  0.3944],
         [ 0.0403,  0.1316,  0.5700, -0.5377,  0.2237, -0.2997,  0.3474],
         [ 0.0490,  0.0765,  0.5976, -0.5576,  0.1844, -0.2860,  0.2997],
         [ 0.0579,  0.0192,  0.6161, -0.5625,  0.1358, -0.2699,  0.2519],
         [ 0.0666, -0.0366,  0.6239, -0.5510,  0.0800, -0.2520,  0.2046],
         [ 0.0745, -0.0875,  0.6191, -0.5219,  0.0193, -0.2334,  0.1584],
         [ 0.0811, -0.1301,  0.6002, -0.4737, -0.0441, -0.2146,  0.1140],
         [ 0.0860, -0.1609,  0.5655, -0.4055, -0.1082, -0.1967,  0.0720],
         [ 0.0885, -0.1764,  0.5160, -0.3188, -0.1706, -0.1804,  0.0331],
         [ 0.0883, -0.1767,  0.4549, -0.2184, -0.2294, -0.1664, -0.0023],
         [ 0.0847, -0.1649,  0.3857, -0.1092, -0.2824, -0.1556, -0.0333],
         [ 0.0773, -0.1442,  0.3120,  0.0041, -0.3278, -0.1489, -0.0594],
         [ 0.0655, -0.1181,  0.2370,  0.1165, -0.3636, -0.1470, -0.0800],
         [ 0.0489, -0.0897,  0.1643,  0.2233, -0.3877, -0.1507, -0.0945],
         [ 0.0269, -0.0623,  0.0972,  0.3195, -0.3981, -0.1609, -0.1022],
         [-0.0009, -0.0393,  0.0394,  0.4005, -0.3930, -0.1783, -0.1024],
         [-0.0352, -0.0240, -0.0059,  0.4613, -0.3702, -0.2038, -0.0946],
         [-0.0763, -0.0196, -0.0352,  0.4970, -0.3278, -0.2382, -0.0782],
         [-0.1249, -0.0295, -0.0450,  0.5029, -0.2639, -0.2823, -0.0524],
         [-0.1814, -0.0568, -0.0319,  0.4742, -0.1764, -0.3369, -0.0168],
         [-0.2464, -0.1051,  0.0076,  0.4059, -0.0633, -0.4028,  0.0294],
         [-0.3203, -0.1774,  0.0768,  0.2932,  0.0773, -0.4809,  0.0868],
         [-0.3757, -0.2401,  0.2036,  0.2605,  0.2606, -0.5651,  0.1648],
         [-0.3757, -0.2401,  0.2036,  0.2605,  0.2606, -0.5651,  0.1648]]],
         
 after optimization (row 67):
 
 tensor([[[ 0.0204,  0.4812,  0.5023, -0.1080,  0.1208, -0.3616,  0.8565],
         [-0.0271,  0.5855,  0.6683, -0.2372,  0.2802, -0.4027,  0.8035],
         [-0.0614,  0.6361,  0.8080, -0.3497,  0.3921, -0.4284,  0.7414],
         [-0.0840,  0.6406,  0.9219, -0.4447,  0.4607, -0.4402,  0.6713],
         [-0.0960,  0.6061,  1.0104, -0.5216,  0.4905, -0.4397,  0.5948],
         [-0.0988,  0.5400,  1.0740, -0.5798,  0.4860, -0.4286,  0.5130],
         [-0.0937,  0.4497,  1.1131, -0.6187,  0.4515, -0.4085,  0.4273],
         [-0.0819,  0.3425,  1.1282, -0.6377,  0.3915, -0.3809,  0.3390],
         [-0.0648,  0.2258,  1.1195, -0.6362,  0.3105, -0.3476,  0.2493],
         [-0.0436,  0.1067,  1.0877, -0.6137,  0.2127, -0.3100,  0.1597],
         [-0.0197, -0.0072,  1.0331, -0.5694,  0.1028, -0.2698,  0.0714],
         [ 0.0056, -0.1087,  0.9561, -0.5027, -0.0150, -0.2287, -0.0142],
         [ 0.0311, -0.1904,  0.8574, -0.4133, -0.1362, -0.1882, -0.0960],
         [ 0.0554, -0.2452,  0.7398, -0.3035, -0.2564, -0.1499, -0.1724],
         [ 0.0773, -0.2693,  0.6089, -0.1788, -0.3712, -0.1155, -0.2424],
         [ 0.0955, -0.2653,  0.4701, -0.0448, -0.4766, -0.0866, -0.3044],
         [ 0.1086, -0.2393,  0.3291,  0.0931, -0.5684, -0.0647, -0.3573],
         [ 0.1154, -0.1974,  0.1915,  0.2293, -0.6427, -0.0515, -0.3997],
         [ 0.1146, -0.1459,  0.0627,  0.3583, -0.6955, -0.0486, -0.4303],
         [ 0.1048, -0.0910, -0.0517,  0.4744, -0.7226, -0.0576, -0.4478],
         [ 0.0848, -0.0388, -0.1461,  0.5722, -0.7202, -0.0801, -0.4509],
         [ 0.0533,  0.0043, -0.2149,  0.6462, -0.6841, -0.1178, -0.4383],
         [ 0.0089,  0.0324, -0.2526,  0.6907, -0.6103, -0.1721, -0.4086],
         [-0.0496,  0.0391, -0.2537,  0.7002, -0.4949, -0.2449, -0.3606],
         [-0.1235,  0.0182, -0.2125,  0.6693, -0.3337, -0.3376, -0.2929],
         [-0.2141, -0.0364, -0.1236,  0.5922, -0.1228, -0.4519, -0.2043],
         [-0.3227, -0.1309,  0.0187,  0.4636,  0.1420, -0.5893, -0.0934],
         [-0.4227, -0.2345,  0.2441,  0.4070,  0.4777, -0.7448,  0.0499],
         [-0.4779, -0.2970,  0.3705,  0.3744,  0.6605, -0.8287,  0.1277],
         [-0.4779, -0.2970,  0.3705,  0.3744,  0.6605, -0.8287,  0.1277]]],
       device='cuda:0')
       
       
       
       
       
       
 ###################################
 i = 0 , t = 2
 ### Focusing on: get_robot_command()
 #THIS IS THE FUNCTION THAT TURNS A POLICY (act_seq) into the next action (act)
 # Starting in curobo/src/curobo/wrap/wrap_mpc.py row 63:
 act = self.safety_rollout.get_robot_command(
                filtered_state, act_seq, shift_steps=shift_steps
            ) -> ...  get_robot_command() at calling curobo/src/curobo/rollout/dynamics_model/kinematic_model.py:

1)  act_seq (row 544) = 
 tensor([[[-0.5217,  0.3689, -0.2820, -1.0660,  0.5299,  0.8762, -0.3328],
         [-0.7147,  0.8254, -0.2855, -0.9510,  0.1189,  0.7708, -0.3676],
         [-0.8362,  1.1360, -0.2616, -0.8693, -0.2038,  0.6713, -0.3805],
         [-0.8951,  1.3175, -0.2160, -0.8153, -0.4453,  0.5784, -0.3741],
         [-0.9008,  1.3864, -0.1546, -0.7837, -0.6125,  0.4928, -0.3511],
         [-0.8624,  1.3595, -0.0830, -0.7690, -0.7125,  0.4154, -0.3138],
         [-0.7890,  1.2534, -0.0070, -0.7657, -0.7521,  0.3467, -0.2650],
         [-0.6897,  1.0848,  0.0676, -0.7684, -0.7384,  0.2874, -0.2071],
         [-0.5738,  0.8704,  0.1351, -0.7716, -0.6784,  0.2384, -0.1428],
         [-0.4504,  0.6268,  0.1897, -0.7699, -0.5791,  0.2002, -0.0746],
         [-0.3287,  0.3708,  0.2257, -0.7577, -0.4473,  0.1736, -0.0050],
         [-0.2177,  0.1190,  0.2373, -0.7297, -0.2902,  0.1593,  0.0633],
         [-0.1267, -0.1119,  0.2191, -0.6803, -0.1146,  0.1581,  0.1279],
         [-0.0625, -0.3040,  0.1713, -0.6042,  0.0723,  0.1704,  0.1865],
         [-0.0298, -0.4389,  0.1017, -0.4960,  0.2638,  0.1940,  0.2375],
         [-0.0301, -0.5055,  0.0194, -0.3547,  0.4527,  0.2237,  0.2797],
         [-0.0587, -0.5073, -0.0664, -0.1878,  0.6320,  0.2541,  0.3131],
         [-0.1076, -0.4555, -0.1463, -0.0066,  0.7949,  0.2798,  0.3384],
         [-0.1690, -0.3614, -0.2112,  0.1768,  0.9344,  0.2955,  0.3562],
         [-0.2348, -0.2365, -0.2518,  0.3509,  1.0433,  0.2958,  0.3672],
         [-0.2970, -0.0920, -0.2588,  0.5038,  1.1148,  0.2754,  0.3719],
         [-0.3476,  0.0604, -0.2230,  0.6237,  1.1419,  0.2289,  0.3711],
         [-0.3786,  0.2096, -0.1351,  0.6988,  1.1177,  0.1509,  0.3654],
         [-0.3819,  0.3440,  0.0141,  0.7174,  1.0350,  0.0361,  0.3554],
         [-0.3497,  0.4523,  0.2339,  0.6678,  0.8869, -0.1208,  0.3418],
         [-0.2737,  0.5231,  0.5335,  0.5380,  0.6666, -0.3253,  0.3252],
         [-0.1462,  0.5449,  0.9222,  0.3164,  0.3669, -0.5827,  0.3063],
         [ 0.0194,  0.3492,  1.1270,  0.0814,  0.0886, -0.7888,  0.2843],
         [ 0.2565,  0.1619,  1.2874, -0.1971, -0.2091, -0.8547,  0.1451],
         [ 0.3931,  0.0439,  1.3720, -0.3582, -0.3737, -0.8888,  0.0701]]],
       device='cuda:0')
       
2) act_step (row 544)
       tensor([[-0.5217,  0.3689, -0.2820, -1.0660,  0.5299,  0.8762, -0.3328]],
       device='cuda:0') # row 0 in act_seq
       
3) cmd = self.state_filter.integrate_action(act_step, current_state) row 545:
	# checked current_state.values:
	# current_state.position
	tensor([[-0.0085, -1.2941, -0.0096, -2.5228,  0.0136,  1.0193, -0.0065]],
	       device='cuda:0')
	# current_state.velocity
	tensor([[-0.0864,  0.0602, -0.0713, -0.2021,  0.1115,  0.1692, -0.0604]],
	       device='cuda:0')
	# current_state.acceleration
	tensor([[-0.5217,  0.3689, -0.2820, -1.0660,  0.5299,  0.8762, -0.3328]],
	       device='cuda:0')

	# checked cmd values:
	# cmd.position
	tensor([[-0.0115, -1.2919, -0.0120, -2.5299,  0.0175,  1.0252, -0.0086]],
	       device='cuda:0')
	# cmd.velocity
	tensor([[-0.1490,  0.1045, -0.1051, -0.3300,  0.1751,  0.2744, -0.1004]],
	       device='cuda:0')
	# cmd.acceleration:
	tensor([[-0.5217,  0.3689, -0.2820, -1.0660,  0.5299,  0.8762, -0.3328]],
	       device='cuda:0')       
4) calling .integrate_action(act_step) actually calls: curobo/src/curobo/util/state_filter.py row 90: integrate_acc(act_step, current_state) ->
Explaining .integrate_acc(qdd_des, cmd_joint_state):
qdd_des (passing act_step) is the *acceleration* for the next command
the time delta is the mpc_dt we set (0.03) - parameter from my script

Now, the next joints pos and joint velocities are calculated based on these rows (102-105):
self.cmd_joint_state.acceleration[:] = qdd_des # THIS IS THE ACCELERATION OF THE NEXT COMMAND. MEANING THAT THE POLICY IS ACCELERATIONS I GUESS.
self.cmd_joint_state.velocity[:] = self.cmd_joint_state.velocity + qdd_des * dt # STRAIGHT FORWARD CALCULATION OF VELOCITIES
self.cmd_joint_state.position[:] = (
    self.cmd_joint_state.position + self.cmd_joint_state.velocity * dt
) # HERE WE COMPUTE THE POSITION AS A DIRECT RESULT OF THE VELOCITY




