#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (0.49571011629701367, 1.4934077312379692, 2.0795461909334687)
                double3 target = (-4.415580941468179, -11.663411414369476, -9.594257371009677)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./World-_360_convoyer.usd"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
        }
    }
    defaultPrim = "World"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "World"
{
    def Xform "_360_convoyer"
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (0.30000000447034836, 0.30000000447034836, 0.30000000447034836)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "ConveyorTrack" (
            prepend references = @https://omniverse-content-staging.s3-us-west-2.amazonaws.com/Assets/Isaac/5.0/Isaac/Props/Conveyors/ConveyorBelt_A03.usd@
        )
        {
            quatd xformOp:orient = (6.123233995736766e-17, 0, 0, 1)
            double3 xformOp:scale = (1, -1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def OmniGraph "ConveyorBeltGraph"
            {
                token evaluationMode = "Automatic"
                token evaluator:type = "execution"
                token fabricCacheBacking = "StageWithoutHistory"
                int2 fileFormatVersion = (1, 9)
                custom float graph:variable:Velocity = 0.5 (
                    customData = {
                        token scope = "private"
                    }
                    displayName = "Velocity"
                )
                token pipelineStage = "pipelineStageSimulation"

                def OmniGraphNode "OnTick"
                {
                    token node:type = "omni.graph.action.OnPlaybackTick"
                    int node:typeVersion = 2
                    custom double outputs:deltaSeconds
                    custom double outputs:frame
                    custom uint outputs:tick (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    custom double outputs:time
                }

                def OmniGraphNode "ConveyorNode"
                {
                    custom float2 inputs:animateDirection = (1, 0)
                    custom float inputs:animateScale = 0.5
                    custom bool inputs:animateTexture
                    custom rel inputs:conveyorPrim = </World/_360_convoyer/ConveyorTrack/Belt> (
                        customData = {
                            dictionary omni = {
                                dictionary graph = {
                                    string relType = "target"
                                }
                            }
                        }
                    )
                    custom bool inputs:curved = 1
                    custom float inputs:delta
                    prepend float inputs:delta.connect = </World/_360_convoyer/ConveyorTrack/ConveyorBeltGraph/OnTick.outputs:deltaSeconds>
                    custom float3 inputs:direction = (0, 0, -37)
                    custom bool inputs:enabled
                    custom uint inputs:onStep (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:onStep.connect = </World/_360_convoyer/ConveyorTrack/ConveyorBeltGraph/OnTick.outputs:tick>
                    custom float inputs:velocity
                    prepend float inputs:velocity.connect = </World/_360_convoyer/ConveyorTrack/ConveyorBeltGraph/read_speed.outputs:value>
                    token node:type = "isaacsim.asset.gen.conveyor.IsaacConveyor"
                    int node:typeVersion = 1
                }

                def OmniGraphNode "read_speed"
                {
                    custom rel inputs:graph = </World/_360_convoyer/ConveyorTrack/ConveyorBeltGraph> (
                        customData = {
                            dictionary omni = {
                                dictionary graph = {
                                    string relType = "target"
                                }
                            }
                        }
                    )
                    custom token inputs:targetPath
                    custom token inputs:variableName = "Velocity"
                    token node:type = "omni.graph.core.ReadVariable"
                    int node:typeVersion = 2
                    custom token outputs:value
                }
            }

            over "Belt" (
                prepend apiSchemas = ["PhysxSurfaceVelocityAPI"]
            )
            {
                vector3f physxSurfaceVelocity:surfaceAngularVelocity = (0, 0, -18.5)
                bool physxSurfaceVelocity:surfaceVelocityEnabled = 1
            }
        }

        def Xform "ConveyorTrack_01" (
            prepend references = @https://omniverse-content-staging.s3-us-west-2.amazonaws.com/Assets/Isaac/5.0/Isaac/Props/Conveyors/ConveyorBelt_A03.usd@
        )
        {
            quatd xformOp:orient = (0.7071067811865477, 0, 0, -0.7071067811865474)
            double3 xformOp:scale = (1, -1, 1)
            double3 xformOp:translate = (-1.4950226, -1.5958896, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def OmniGraph "ConveyorBeltGraph"
            {
                token evaluationMode = "Automatic"
                token evaluator:type = "execution"
                token fabricCacheBacking = "StageWithoutHistory"
                int2 fileFormatVersion = (1, 9)
                custom float graph:variable:Velocity = 0.5 (
                    customData = {
                        token scope = "private"
                    }
                    displayName = "Velocity"
                )
                token pipelineStage = "pipelineStageSimulation"

                def OmniGraphNode "OnTick"
                {
                    token node:type = "omni.graph.action.OnPlaybackTick"
                    int node:typeVersion = 2
                    custom double outputs:deltaSeconds
                    custom double outputs:frame
                    custom uint outputs:tick (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    custom double outputs:time
                }

                def OmniGraphNode "ConveyorNode"
                {
                    custom float2 inputs:animateDirection = (1, 0)
                    custom float inputs:animateScale = 0.5
                    custom bool inputs:animateTexture
                    custom rel inputs:conveyorPrim = </World/_360_convoyer/ConveyorTrack_01/Belt> (
                        customData = {
                            dictionary omni = {
                                dictionary graph = {
                                    string relType = "target"
                                }
                            }
                        }
                    )
                    custom bool inputs:curved = 1
                    custom float inputs:delta
                    prepend float inputs:delta.connect = </World/_360_convoyer/ConveyorTrack_01/ConveyorBeltGraph/OnTick.outputs:deltaSeconds>
                    custom float3 inputs:direction = (0, 0, -37)
                    custom bool inputs:enabled
                    custom uint inputs:onStep (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:onStep.connect = </World/_360_convoyer/ConveyorTrack_01/ConveyorBeltGraph/OnTick.outputs:tick>
                    custom float inputs:velocity
                    prepend float inputs:velocity.connect = </World/_360_convoyer/ConveyorTrack_01/ConveyorBeltGraph/read_speed.outputs:value>
                    token node:type = "isaacsim.asset.gen.conveyor.IsaacConveyor"
                    int node:typeVersion = 1
                }

                def OmniGraphNode "read_speed"
                {
                    custom rel inputs:graph = </World/_360_convoyer/ConveyorTrack_01/ConveyorBeltGraph> (
                        customData = {
                            dictionary omni = {
                                dictionary graph = {
                                    string relType = "target"
                                }
                            }
                        }
                    )
                    custom token inputs:targetPath
                    custom token inputs:variableName = "Velocity"
                    token node:type = "omni.graph.core.ReadVariable"
                    int node:typeVersion = 2
                    custom token outputs:value
                }
            }

            over "Belt" (
                prepend apiSchemas = ["PhysxSurfaceVelocityAPI"]
            )
            {
                vector3f physxSurfaceVelocity:surfaceAngularVelocity = (0, 0, -18.5)
                bool physxSurfaceVelocity:surfaceVelocityEnabled = 1
            }
        }

        def Xform "ConveyorTrack_02" (
            prepend references = @https://omniverse-content-staging.s3-us-west-2.amazonaws.com/Assets/Isaac/5.0/Isaac/Props/Conveyors/ConveyorBelt_A03.usd@
        )
        {
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, -1, 1)
            double3 xformOp:translate = (0.10086700000000093, -3.090912199999999, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def OmniGraph "ConveyorBeltGraph"
            {
                token evaluationMode = "Automatic"
                token evaluator:type = "execution"
                token fabricCacheBacking = "StageWithoutHistory"
                int2 fileFormatVersion = (1, 9)
                custom float graph:variable:Velocity = -0.5 (
                    customData = {
                        token scope = "private"
                    }
                    displayName = "Velocity"
                )
                token pipelineStage = "pipelineStageSimulation"

                def OmniGraphNode "OnTick"
                {
                    token node:type = "omni.graph.action.OnPlaybackTick"
                    int node:typeVersion = 2
                    custom double outputs:deltaSeconds
                    custom double outputs:frame
                    custom uint outputs:tick (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    custom double outputs:time
                }

                def OmniGraphNode "ConveyorNode"
                {
                    custom float2 inputs:animateDirection = (1, 0)
                    custom float inputs:animateScale = 0.5
                    custom bool inputs:animateTexture
                    custom rel inputs:conveyorPrim = </World/_360_convoyer/ConveyorTrack_02/Belt> (
                        customData = {
                            dictionary omni = {
                                dictionary graph = {
                                    string relType = "target"
                                }
                            }
                        }
                    )
                    custom bool inputs:curved = 1
                    custom float inputs:delta
                    prepend float inputs:delta.connect = </World/_360_convoyer/ConveyorTrack_02/ConveyorBeltGraph/OnTick.outputs:deltaSeconds>
                    custom float3 inputs:direction = (0, 0, -37)
                    custom bool inputs:enabled
                    custom uint inputs:onStep (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:onStep.connect = </World/_360_convoyer/ConveyorTrack_02/ConveyorBeltGraph/OnTick.outputs:tick>
                    custom float inputs:velocity
                    prepend float inputs:velocity.connect = </World/_360_convoyer/ConveyorTrack_02/ConveyorBeltGraph/read_speed.outputs:value>
                    token node:type = "isaacsim.asset.gen.conveyor.IsaacConveyor"
                    int node:typeVersion = 1
                }

                def OmniGraphNode "read_speed"
                {
                    custom rel inputs:graph = </World/_360_convoyer/ConveyorTrack_02/ConveyorBeltGraph> (
                        customData = {
                            dictionary omni = {
                                dictionary graph = {
                                    string relType = "target"
                                }
                            }
                        }
                    )
                    custom token inputs:targetPath
                    custom token inputs:variableName = "Velocity"
                    token node:type = "omni.graph.core.ReadVariable"
                    int node:typeVersion = 2
                    custom token outputs:value
                }
            }

            over "Belt" (
                prepend apiSchemas = ["PhysxSurfaceVelocityAPI"]
            )
            {
                vector3f physxSurfaceVelocity:surfaceAngularVelocity = (-0, -0, 18.5)
                bool physxSurfaceVelocity:surfaceVelocityEnabled = 1
            }
        }

        def Xform "ConveyorTrack_03" (
            prepend references = @https://omniverse-content-staging.s3-us-west-2.amazonaws.com/Assets/Isaac/5.0/Isaac/Props/Conveyors/ConveyorBelt_A03.usd@
        )
        {
            quatd xformOp:orient = (0.7071067811865474, 0, 0, 0.7071067811865477)
            double3 xformOp:scale = (1, -1, 1)
            double3 xformOp:translate = (1.5958896000000007, -1.4950225999999989, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def OmniGraph "ConveyorBeltGraph"
            {
                token evaluationMode = "Automatic"
                token evaluator:type = "execution"
                token fabricCacheBacking = "StageWithoutHistory"
                int2 fileFormatVersion = (1, 9)
                custom float graph:variable:Velocity = 0.5 (
                    customData = {
                        token scope = "private"
                    }
                    displayName = "Velocity"
                )
                token pipelineStage = "pipelineStageSimulation"

                def OmniGraphNode "OnTick"
                {
                    token node:type = "omni.graph.action.OnPlaybackTick"
                    int node:typeVersion = 2
                    custom double outputs:deltaSeconds
                    custom double outputs:frame
                    custom uint outputs:tick (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    custom double outputs:time
                }

                def OmniGraphNode "ConveyorNode"
                {
                    custom float2 inputs:animateDirection = (1, 0)
                    custom float inputs:animateScale = 0.5
                    custom bool inputs:animateTexture
                    custom rel inputs:conveyorPrim = </World/_360_convoyer/ConveyorTrack_03/Belt> (
                        customData = {
                            dictionary omni = {
                                dictionary graph = {
                                    string relType = "target"
                                }
                            }
                        }
                    )
                    custom bool inputs:curved = 1
                    custom float inputs:delta
                    prepend float inputs:delta.connect = </World/_360_convoyer/ConveyorTrack_03/ConveyorBeltGraph/OnTick.outputs:deltaSeconds>
                    custom float3 inputs:direction = (0, 0, -37)
                    custom bool inputs:enabled
                    custom uint inputs:onStep (
                        customData = {
                            bool isExecution = 1
                        }
                    )
                    prepend uint inputs:onStep.connect = </World/_360_convoyer/ConveyorTrack_03/ConveyorBeltGraph/OnTick.outputs:tick>
                    custom float inputs:velocity
                    prepend float inputs:velocity.connect = </World/_360_convoyer/ConveyorTrack_03/ConveyorBeltGraph/read_speed.outputs:value>
                    token node:type = "isaacsim.asset.gen.conveyor.IsaacConveyor"
                    int node:typeVersion = 1
                }

                def OmniGraphNode "read_speed"
                {
                    custom rel inputs:graph = </World/_360_convoyer/ConveyorTrack_03/ConveyorBeltGraph> (
                        customData = {
                            dictionary omni = {
                                dictionary graph = {
                                    string relType = "target"
                                }
                            }
                        }
                    )
                    custom token inputs:targetPath
                    custom token inputs:variableName = "Velocity"
                    token node:type = "omni.graph.core.ReadVariable"
                    int node:typeVersion = 2
                    custom token outputs:value
                }
            }

            over "Belt" (
                prepend apiSchemas = ["PhysxSurfaceVelocityAPI"]
            )
            {
                vector3f physxSurfaceVelocity:surfaceAngularVelocity = (0, 0, -18.5)
                bool physxSurfaceVelocity:surfaceVelocityEnabled = 1
            }
        }

        def Cube "Cube" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            bool physics:collisionEnabled = 1
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.5000000074505806, 0.5000000074505806, 0.5000000074505806)
            double3 xformOp:translate = (1.352364611609063, -0.9664191643444593, 2.2727767410371507)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

def "Render" (
    hide_in_stage_window = true
    no_delete = true
)
{
    def "OmniverseKit"
    {
        def "HydraTextures" (
            hide_in_stage_window = true
            no_delete = true
        )
        {
            def RenderProduct "omni_kit_widget_viewport_ViewportTexture_0" (
                prepend apiSchemas = ["OmniRtxSettingsCommonAdvancedAPI_1", "OmniRtxSettingsRtAdvancedAPI_1", "OmniRtxSettingsPtAdvancedAPI_1", "OmniRtxPostColorGradingAPI_1", "OmniRtxPostChromaticAberrationAPI_1", "OmniRtxPostBloomPhysicalAPI_1", "OmniRtxPostMatteObjectAPI_1", "OmniRtxPostCompositingAPI_1", "OmniRtxPostDofAPI_1", "OmniRtxPostMotionBlurAPI_1", "OmniRtxPostTvNoiseAPI_1", "OmniRtxPostTonemapIrayReinhardAPI_1", "OmniRtxPostDebugSettingsAPI_1", "OmniRtxDebugSettingsAPI_1"]
                hide_in_stage_window = true
                no_delete = true
            )
            {
                rel camera = </OmniverseKit_Persp>
                token omni:rtx:background:source:texture:textureMode = "repeatMirrored"
                token omni:rtx:background:source:type = "domeLight"
                string omni:rtx:material:db:rtSensorNameToIdMap = "DefaultMaterial:0;AsphaltStandardMaterial:1;AsphaltWeatheredMaterial:2;VegetationGrassMaterial:3;WaterStandardMaterial:4;GlassStandardMaterial:5;FiberGlassMaterial:6;MetalAlloyMaterial:7;MetalAluminumMaterial:8;MetalAluminumOxidizedMaterial:9;PlasticStandardMaterial:10;RetroMarkingsMaterial:11;RetroSignMaterial:12;RubberStandardMaterial:13;SoilClayMaterial:14;ConcreteRoughMaterial:15;ConcreteSmoothMaterial:16;OakTreeBarkMaterial:17;FabricStandardMaterial:18;PlexiGlassStandardMaterial:19;MetalSilverMaterial:20"
                bool omni:rtx:post:registeredCompositing:invertColorCorrection = 1
                bool omni:rtx:post:registeredCompositing:invertToneMap = 1
                bool omni:rtx:pt:lightcache:cached:dontResolveConflicts = 1
                int omni:rtx:pt:maxSamplesPerLaunch = 2073600
                int omni:rtx:pt:mgpu:maxPixelsPerRegionExponent = 12
                color3f omni:rtx:rt:ambientLight:color = (0.1, 0.1, 0.1)
                bool omni:rtx:rt:demoire = 0
                bool omni:rtx:rt:ecoMode:enabled
                bool omni:rtx:rt:lightcache:spatialCache:dontResolveConflicts = 1
                uint omni:rtx:viewTile:limit = 4294967295
                rel orderedVars = </Render/Vars/LdrColor>
                custom bool overrideClipRange = 0
                uniform int2 resolution = (1280, 720)
            }
        }
    }

    def RenderSettings "OmniverseGlobalRenderSettings" (
        prepend apiSchemas = ["OmniRtxSettingsGlobalRtAdvancedAPI_1", "OmniRtxSettingsGlobalPtAdvancedAPI_1"]
        no_delete = true
    )
    {
        rel products = </Render/OmniverseKit/HydraTextures/omni_kit_widget_viewport_ViewportTexture_0>
    }

    def "Vars"
    {
        def RenderVar "LdrColor" (
            hide_in_stage_window = true
            no_delete = true
        )
        {
            uniform string sourceName = "LdrColor"
        }
    }
}

