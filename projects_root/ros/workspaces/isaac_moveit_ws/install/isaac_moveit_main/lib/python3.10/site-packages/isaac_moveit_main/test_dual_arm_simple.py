#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
import moveit_commander
import sys
from geometry_msgs.msg import Pose
import time

class DualArmSimpleTest(Node):
    def __init__(self):
        super().__init__('dual_arm_simple_test')
        
        # Initialize moveit_commander
        moveit_commander.roscpp_initialize(sys.argv)
        
        # Create move group for combined arms (exactly as friend recommended)
        self.group = moveit_commander.MoveGroupCommander("all_arms")
        
        # Get current pose to start from a known position
        self.get_logger().info("=== DUAL-ARM SIMPLE TEST (Friend's Approach) ===")
        self.get_logger().info(f"Planning group: {self.group.get_name()}")
        self.get_logger().info(f"End effector links: {self.group.get_end_effector_link()}")
        
        # Get all end effector links
        try:
            # Try to get end effector links for verification
            self.get_logger().info("Planning frame: " + self.group.get_planning_frame())
            self.get_logger().info("Available joints: " + str(self.group.get_joints()))
        except Exception as e:
            self.get_logger().warn(f"Could not get group info: {e}")

    def test_dual_pose_targets(self):
        """Test setting pose targets for both arms as friend recommended"""
        
        self.get_logger().info("\nStep 1: Setting pose targets for BOTH end effectors...")
        
        # ===== LEFT ARM TARGET (as friend showed) =====
        pose_left = Pose()
        pose_left.position.x = 0.4
        pose_left.position.y = 0.2   # Left side
        pose_left.position.z = 0.4
        pose_left.orientation.x = 0.0
        pose_left.orientation.y = 0.0
        pose_left.orientation.z = 0.0
        pose_left.orientation.w = 1.0
        
        self.get_logger().info(f"Left arm target: x={pose_left.position.x}, y={pose_left.position.y}, z={pose_left.position.z}")
        
        # ===== RIGHT ARM TARGET (as friend showed) =====
        pose_right = Pose()
        pose_right.position.x = 0.4
        pose_right.position.y = -0.2  # Right side
        pose_right.position.z = 0.4
        pose_right.orientation.x = 0.0
        pose_right.orientation.y = 0.0
        pose_right.orientation.z = 0.0
        pose_right.orientation.w = 1.0
        
        self.get_logger().info(f"Right arm target: x={pose_right.position.x}, y={pose_right.position.y}, z={pose_right.position.z}")
        
        # Set pose targets for both end effectors (EXACTLY as friend recommended)
        try:
            # Set target for left end effector
            self.group.set_pose_target(pose_left, "left_panda_link8")
            self.get_logger().info("‚úÖ Left arm pose target set!")
            
            # Set target for right end effector  
            self.group.set_pose_target(pose_right, "right_panda_link8")
            self.get_logger().info("‚úÖ Right arm pose target set!")
            
        except Exception as e:
            self.get_logger().error(f"Failed to set pose targets: {e}")
            return False
            
        return True

    def test_planning(self):
        """Test planning for both arms simultaneously"""
        
        self.get_logger().info("\nStep 2: Planning for BOTH arms simultaneously...")
        
        # Set planning parameters
        self.group.set_planning_time(10.0)
        self.group.set_num_planning_attempts(5)
        self.group.set_max_velocity_scaling_factor(0.1)
        self.group.set_max_acceleration_scaling_factor(0.1)
        
        # Plan (this creates ONE trajectory for BOTH arms)
        self.get_logger().info("Planning...")
        plan = self.group.plan()
        
        # Check if planning succeeded (plan is a tuple in newer versions)
        if isinstance(plan, tuple):
            success, trajectory, planning_time, error_code = plan
        else:
            # Older version compatibility
            success = plan
            trajectory = plan if success else None
            
        if success:
            self.get_logger().info("‚úÖ PLANNING SUCCEEDED!")
            if trajectory:
                num_points = len(trajectory.joint_trajectory.points)
                self.get_logger().info(f"Trajectory has {num_points} waypoints")
                if num_points > 0:
                    duration = trajectory.joint_trajectory.points[-1].time_from_start
                    self.get_logger().info(f"Trajectory duration: {duration.sec}.{duration.nanosec//1000000:03d} seconds")
            
            # Ask user if they want to execute
            return self.ask_for_execution()
        else:
            self.get_logger().error("‚ùå PLANNING FAILED!")
            self.get_logger().info("This could be due to:")
            self.get_logger().info("- Unreachable target positions")
            self.get_logger().info("- Collision between arms")
            self.get_logger().info("- Joint limits exceeded")
            return False

    def ask_for_execution(self):
        """Ask user if they want to execute the motion"""
        
        self.get_logger().info("\nStep 3: Execute the motion?")
        try:
            user_input = input("Do you want to execute the planned motion? (y/n): ")
            
            if user_input.lower() == 'y':
                self.get_logger().info("Executing motion...")
                success = self.group.execute(wait=True)
                
                if success:
                    self.get_logger().info("‚úÖ EXECUTION SUCCEEDED!")
                    self.get_logger().info("Both arms moved to target positions!")
                    return True
                else:
                    self.get_logger().error("‚ùå EXECUTION FAILED!")
                    return False
            else:
                self.get_logger().info("Execution skipped by user.")
                return True
                
        except Exception as e:
            self.get_logger().error(f"Execution failed: {e}")
            return False

    def cleanup(self):
        """Clean up resources"""
        moveit_commander.roscpp_shutdown()

def main():
    rclpy.init()
    
    test_node = DualArmSimpleTest()
    
    try:
        # Test the dual-arm pose targets approach
        if test_node.test_dual_pose_targets():
            if test_node.test_planning():
                test_node.get_logger().info("\nüéâ SUCCESS! Your dual-arm setup works perfectly!")
                test_node.get_logger().info("‚úÖ You can set different poses for each arm")
                test_node.get_logger().info("‚úÖ Planning considers both arms simultaneously") 
                test_node.get_logger().info("‚úÖ Collision avoidance between arms")
                test_node.get_logger().info("‚úÖ Single coordinated motion for both arms")
                test_node.get_logger().info("\nYour friend's approach works exactly as described! üöÄ")
            else:
                test_node.get_logger().info("Planning failed - check robot positions and workspace")
        else:
            test_node.get_logger().info("Failed to set pose targets")
            
    except KeyboardInterrupt:
        test_node.get_logger().info("Test interrupted by user")
    finally:
        test_node.cleanup()
        test_node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main() 