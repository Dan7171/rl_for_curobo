#0 building with "default" instance using docker driver

#1 [internal] load build definition from isaac_sim_45.dockerfile
#1 transferring dockerfile: 14.37kB done
#1 DONE 0.0s

#2 [internal] load metadata for nvcr.io/nvidia/isaac-sim:4.5.0
#2 DONE 0.0s

#3 [internal] load metadata for nvcr.io/nvidia/cuda:11.8.0-devel-ubuntu22.04
#3 DONE 0.8s

#4 [internal] load .dockerignore
#4 transferring context: 2B done
#4 DONE 0.0s

#5 [stage-1  1/30] FROM nvcr.io/nvidia/cuda:11.8.0-devel-ubuntu22.04@sha256:94fd755736cb58979173d491504f0b573247b1745250249415b07fefc738e41f
#5 DONE 0.0s

#6 [isaac-sim 1/1] FROM nvcr.io/nvidia/isaac-sim:4.5.0
#6 DONE 0.0s

#7 [stage-1 23/30] RUN cd /pkgs && git clone https://github.com/nvlabs/nvblox_torch.git &&     cd /pkgs/nvblox_torch &&     sh install_isaac_sim.sh $(/isaac-sim/python.sh -c 'import torch.utils; print(torch.utils.cmake_prefix_path)') &&     /isaac-sim/python.sh -m pip install -e .
#7 CACHED

#8 [stage-1 20/30] RUN cd /pkgs && git clone https://github.com/gflags/gflags.git -b v2.2.2 &&     cd gflags &&      mkdir build && cd build &&     cmake .. -DCMAKE_POSITION_INDEPENDENT_CODE=ON     -DCMAKE_INSTALL_PREFIX=/pkgs/gflags/install/     -DGFLAGS_BUILD_STATIC_LIBS=ON -DCMAKE_CXX_FLAGS=-D_GLIBCXX_USE_CXX11_ABI=0     && make -j8 && make install
#8 CACHED

#9 [stage-1 17/30] RUN cd /pkgs && wget https://cmake.org/files/v3.27/cmake-3.27.1.tar.gz &&     tar -xvzf cmake-3.27.1.tar.gz &&     apt update &&  apt install -y build-essential checkinstall zlib1g-dev libssl-dev &&     cd cmake-3.27.1 && ./bootstrap &&     make -j8 &&     make install &&  rm -rf /var/lib/apt/lists/*
#9 CACHED

#10 [stage-1  7/30] COPY --from=isaac-sim /root/.nvidia-omniverse/config /root/.nvidia-omniverse/config
#10 CACHED

#11 [stage-1 29/30] RUN apt-get update &&     apt-get install -y --no-install-recommends python3-rosdep python3-vcstool git-lfs &&     git lfs install --skip-repo &&     mkdir -p /workspaces/isaac_ros_ws/src &&     cd /workspaces/isaac_ros_ws &&     git clone --depth 1 --branch release-3.2 https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_common.git src/isaac_ros_common &&     curl -fsSL https://raw.githubusercontent.com/NVIDIA-ISAAC-ROS/isaac_ros_common/release-3.2/scripts/isaac_ros_common.repos | vcs import src || true &&     git lfs pull --include "*" --exclude "" || true &&     rosdep init && rosdep update &&     rosdep install --from-paths src -y --rosdistro humble --ignore-src &&     /bin/bash -c "source /opt/ros/humble/setup.bash && colcon build --symlink-install --cmake-args -DCMAKE_CUDA_ARCHITECTURES=70" &&     echo 'source /workspaces/isaac_ros_ws/install/setup.bash' >> /etc/profile.d/isaac_ros_ws.sh
#11 CACHED

#12 [stage-1 26/30] RUN if ! id -u developer >/dev/null 2>&1; then         useradd -m -s /bin/bash developer;     fi &&     echo "developer ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
#12 CACHED

#13 [stage-1  4/30] RUN apt-get update && apt-get install -y --no-install-recommends     libatomic1     libegl1     libglu1-mesa     libgomp1     libsm6     libxi6     libxrandr2     libxt6     libfreetype-dev     libfontconfig1     openssl     libssl3     wget     vulkan-tools && apt-get -y autoremove && apt-get clean autoclean && rm -rf /var/lib/apt/lists/*
#13 CACHED

#14 [stage-1  5/30] COPY --from=isaac-sim /isaac-sim /isaac-sim
#14 CACHED

#15 [stage-1  8/30] COPY --from=isaac-sim /etc/vulkan/icd.d/nvidia_icd.json /etc/vulkan/icd.d/nvidia_icd.json
#15 CACHED

#16 [stage-1  3/30] RUN apt-get update && apt-get install -y   tzdata   software-properties-common   && rm -rf /var/lib/apt/lists/*   && ln -fs /usr/share/zoneinfo/America/Los_Angeles /etc/localtime   && echo "America/Los_Angeles" > /etc/timezone   && dpkg-reconfigure -f noninteractive tzdata   && add-apt-repository universe   && add-apt-repository -y ppa:git-core/ppa   && apt-get update && apt-get install -y   curl   lsb-core   wget   build-essential   cmake   git   git-lfs   iputils-ping   make   openssh-server   openssh-client   libeigen3-dev   libssl3   python3-pip   python3-ipdb   python3-tk   python3-wstool   sudo git bash unattended-upgrades   apt-utils   terminator   && rm -rf /var/lib/apt/lists/*
#16 CACHED

#17 [stage-1 16/30] RUN apt-get update &&     apt-get install -y curl tcl &&     rm -rf /var/lib/apt/lists/*
#17 CACHED

#18 [stage-1  2/30] RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
#18 CACHED

#19 [stage-1 18/30] RUN cd /pkgs && git clone https://github.com/sqlite/sqlite.git -b version-3.39.4 &&     cd /pkgs/sqlite && CFLAGS=-fPIC ./configure --prefix=/pkgs/sqlite/install/ &&     make && make install
#19 CACHED

#20 [stage-1 13/30] RUN /isaac-sim/python.sh -m pip install ninja wheel tomli
#20 CACHED

#21 [stage-1 27/30] RUN apt-get update && apt-get install -y --no-install-recommends         locales curl gnupg lsb-release &&     locale-gen en_US en_US.UTF-8 &&     update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 &&     curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key         | gpg --dearmor -o /usr/share/keyrings/ros-archive-keyring.gpg &&     echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg]          http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main"         > /etc/apt/sources.list.d/ros2.list &&     apt-get update &&     apt-get install -y --no-install-recommends         ros-humble-desktop-full python3-colcon-common-extensions bash-completion &&     apt-get clean && rm -rf /var/lib/apt/lists/* &&     echo "source /opt/ros/humble/setup.bash" >> /etc/profile.d/ros.sh
#21 CACHED

#22 [stage-1 11/30] RUN echo "alias omni_python='/isaac-sim/python.sh'" >> ~/.bashrc
#22 CACHED

#23 [stage-1 25/30] RUN /isaac-sim/python.sh -m pip install "robometrics[evaluator] @ git+https://github.com/fishbotics/robometrics.git"
#23 CACHED

#24 [stage-1  6/30] RUN mkdir -p /root/.nvidia-omniverse/config
#24 CACHED

#25 [stage-1 22/30] RUN cd /pkgs/glog &&     mkdir build_isaac && cd build_isaac &&     cmake .. -DCMAKE_POSITION_INDEPENDENT_CODE=ON     -DWITH_GFLAGS=OFF -DWITH_GTEST=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_CXX_FLAGS=-D_GLIBCXX_USE_CXX11_ABI=0     && make -j8 && make install
#25 CACHED

#26 [stage-1 19/30] RUN cd /pkgs && git clone https://github.com/google/glog.git -b v0.6.0 &&     cd glog &&     mkdir build && cd build &&     cmake .. -DCMAKE_POSITION_INDEPENDENT_CODE=ON     -DCMAKE_INSTALL_PREFIX=/pkgs/glog/install/     -DWITH_GFLAGS=OFF -DWITH_GTEST=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_CXX_FLAGS=-D_GLIBCXX_USE_CXX11_ABI=0     && make -j8 && make install
#26 CACHED

#27 [stage-1 28/30] RUN apt-get update && apt-get install -y --no-install-recommends gnupg software-properties-common &&     apt-key adv --fetch-key https://repo.download.nvidia.com/jetson/jetson-ota-public.asc &&     add-apt-repository 'deb https://repo.download.nvidia.com/jetson/x86_64/jammy r36.4 main' &&     apt-get update &&     apt-get install -y --no-install-recommends libnvvpi3 vpi3-dev &&     rm -rf /var/lib/apt/lists/*
#27 CACHED

#28 [stage-1 15/30] WORKDIR /pkgs/curobo
#28 CACHED

#29 [stage-1 12/30] RUN mkdir /pkgs && cd /pkgs && git clone https://github.com/NVlabs/curobo.git
#29 CACHED

#30 [stage-1  9/30] COPY --from=isaac-sim /etc/vulkan/icd.d/nvidia_icd.json /etc/vulkan/implicit_layer.d/nvidia_layers.json
#30 CACHED

#31 [stage-1 24/30] RUN /isaac-sim/python.sh -m pip install pyrealsense2 opencv-python transforms3d
#31 CACHED

#32 [stage-1 10/30] WORKDIR /isaac-sim
#32 CACHED

#33 [stage-1 14/30] RUN cd /pkgs/curobo && /isaac-sim/python.sh -m pip install .[dev] --no-build-isolation
#33 CACHED

#34 [stage-1 21/30] RUN cd /pkgs &&  git clone https://github.com/valtsblukis/nvblox.git && cd /pkgs/nvblox/nvblox &&     mkdir build && cd build &&     cmake ..  -DBUILD_REDISTRIBUTABLE=ON     -DCMAKE_CXX_FLAGS=-D_GLIBCXX_USE_CXX11_ABI=0  -DPRE_CXX11_ABI_LINKABLE=ON     -DSQLITE3_BASE_PATH="/pkgs/sqlite/install/" -DGLOG_BASE_PATH="/pkgs/glog/install/"     -DGFLAGS_BASE_PATH="/pkgs/gflags/install/" -DCMAKE_CUDA_FLAGS=-D_GLIBCXX_USE_CXX11_ABI=0     -DBUILD_TESTING=OFF &&     make -j32 &&     make install
#34 CACHED

#35 [stage-1 30/30] RUN /isaac-sim/python.sh -m pip install --no-cache-dir matplotlib
#35 CACHED

#36 exporting to image
#36 exporting layers
#36 exporting layers 28.9s done
#36 writing image sha256:78e1697dcc805e105117d7fe2a2441a0f5e1342e93341ae3f91074e1a546ed7a done
#36 naming to docker.io/library/curobo_isaac45 done
#36 DONE 28.9s

 [33m4 warnings found (use docker --debug to expand):
[0m - LegacyKeyValueFormat: "LABEL key=value" should be used instead of legacy "LABEL key value" format (line 48)
 - UndefinedVar: Usage of undefined variable '$ISAAC_SIM_VERSION' (line 140)
 - LegacyKeyValueFormat: "ENV key=value" should be used instead of legacy "ENV key value" format (line 140)
 - LegacyKeyValueFormat: "ENV key=value" should be used instead of legacy "ENV key value" format (line 141)
