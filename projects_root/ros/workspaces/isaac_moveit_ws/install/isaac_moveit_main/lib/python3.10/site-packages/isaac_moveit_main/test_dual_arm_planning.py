#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from moveit_msgs.action import MoveGroup
from moveit_msgs.msg import PlanningScene, MotionPlanRequest, Constraints, PositionConstraint, OrientationConstraint
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from shape_msgs.msg import SolidPrimitive
from rclpy.action import ActionClient
import time

class DualArmPlanningTest(Node):
    def __init__(self):
        super().__init__('dual_arm_planning_test')
        
        # Create action client for MoveGroup
        self.move_group_client = ActionClient(self, MoveGroup, '/move_action')
        
        # Wait for action server
        self.get_logger().info("Waiting for MoveGroup action server...")
        self.move_group_client.wait_for_server()
        self.get_logger().info("MoveGroup action server ready!")

    def create_dual_arm_goal(self):
        """Create a planning request with goals for both end effectors"""
        
        goal = MoveGroup.Goal()
        
        # Set the planning group to all_arms for centralized planning
        goal.request.group_name = "all_arms"
        goal.request.num_planning_attempts = 10
        goal.request.allowed_planning_time = 5.0
        goal.request.max_velocity_scaling_factor = 0.1
        goal.request.max_acceleration_scaling_factor = 0.1
        
        # Define goal constraints for BOTH end effectors
        constraints = Constraints()
        
        # ===== LEFT ARM END EFFECTOR GOAL =====
        left_position_constraint = PositionConstraint()
        left_position_constraint.header.frame_id = "base_link"
        left_position_constraint.link_name = "left_panda_link8"  # Left end effector
        
        # Set left arm target position
        left_position_constraint.target_point_offset.x = 0.5
        left_position_constraint.target_point_offset.y = 0.3  # Left side
        left_position_constraint.target_point_offset.z = 0.4
        
        # Tolerance for left arm
        primitive_left = SolidPrimitive()
        primitive_left.type = SolidPrimitive.SPHERE
        primitive_left.dimensions = [0.01]  # 1cm tolerance
        left_position_constraint.constraint_region.primitives.append(primitive_left)
        
        pose_left = Pose()
        pose_left.position.x = 0.5
        pose_left.position.y = 0.3
        pose_left.position.z = 0.4
        pose_left.orientation.w = 1.0
        left_position_constraint.constraint_region.primitive_poses.append(pose_left)
        left_position_constraint.weight = 1.0
        
        # ===== RIGHT ARM END EFFECTOR GOAL =====
        right_position_constraint = PositionConstraint()
        right_position_constraint.header.frame_id = "base_link"
        right_position_constraint.link_name = "right_panda_link8"  # Right end effector
        
        # Set right arm target position  
        right_position_constraint.target_point_offset.x = 0.5
        right_position_constraint.target_point_offset.y = -0.3  # Right side
        right_position_constraint.target_point_offset.z = 0.4
        
        # Tolerance for right arm
        primitive_right = SolidPrimitive()
        primitive_right.type = SolidPrimitive.SPHERE
        primitive_right.dimensions = [0.01]  # 1cm tolerance
        right_position_constraint.constraint_region.primitives.append(primitive_right)
        
        pose_right = Pose()
        pose_right.position.x = 0.5
        pose_right.position.y = -0.3
        pose_right.position.z = 0.4
        pose_right.orientation.w = 1.0
        right_position_constraint.constraint_region.primitive_poses.append(pose_right)
        right_position_constraint.weight = 1.0
        
        # Add both constraints to the planning request
        constraints.position_constraints.append(left_position_constraint)
        constraints.position_constraints.append(right_position_constraint)
        
        goal.request.goal_constraints.append(constraints)
        
        return goal

    def test_dual_arm_planning(self):
        """Test planning for both arms simultaneously"""
        
        self.get_logger().info("Creating dual-arm planning goal...")
        goal = self.create_dual_arm_goal()
        
        self.get_logger().info("Sending dual-arm planning request...")
        self.get_logger().info(f"Planning group: {goal.request.group_name}")
        self.get_logger().info(f"Number of position constraints: {len(goal.request.goal_constraints[0].position_constraints)}")
        
        # List the end effector links being planned for
        for i, constraint in enumerate(goal.request.goal_constraints[0].position_constraints):
            self.get_logger().info(f"End effector {i+1}: {constraint.link_name}")
            pos = constraint.constraint_region.primitive_poses[0].position
            self.get_logger().info(f"  Target position: x={pos.x}, y={pos.y}, z={pos.z}")
        
        # Send the goal
        future = self.move_group_client.send_goal_async(goal)
        
        return future

def main():
    rclpy.init()
    
    test_node = DualArmPlanningTest()
    
    try:
        # Test dual-arm planning
        future = test_node.test_dual_arm_planning()
        
        test_node.get_logger().info("=== DUAL-ARM PLANNING TEST ===")
        test_node.get_logger().info("This test verifies that:")
        test_node.get_logger().info("1. We can send goals to BOTH end effectors simultaneously")
        test_node.get_logger().info("2. Using the single 'all_arms' planning group")
        test_node.get_logger().info("3. Left end effector: left_panda_link8")
        test_node.get_logger().info("4. Right end effector: right_panda_link8")
        test_node.get_logger().info("5. Centralized motion planning for both arms together")
        test_node.get_logger().info("=====================================")
        
        # Keep node alive to see the result
        rclpy.spin_once(test_node, timeout_sec=1.0)
        
    except KeyboardInterrupt:
        pass
    finally:
        test_node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main() 