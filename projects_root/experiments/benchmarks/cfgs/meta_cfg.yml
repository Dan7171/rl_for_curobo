default: # default values to fallback to if not specified in the agent cfg. Note: you can specify agent-specific values here for each of  the default values in this file (see below).
  is_mobile: False
  mobile_base_link_subpath: ''
  cu_world_wrapper: # curoboworld collision wrapper
    verbosity: 4 # 0 to 4 (0 is no output, 4 is max output) 
    never_add: [] # paths of objects that should never be added to the collision world (for example, robot itself or the robot target)
    never_update: [] # paths of objects that are added at the beginning of the simulation and should never be updated in the collision world (normally should set here the static objects, like the ground)

  
  cumotion: # cumotion related default values (if not specified by the agent)
    motion_gen_cfg:
      use_cuda_graph: True 
      self_collision_check: True
      collision_checker_type: MESH
      collision_cache: {"obb": 15, "mesh": 15}
      interpolation_dt: 0.03
      collision_activation_distance: 0.025
      fixed_iters_trajopt: True
      maximum_trajectory_dt: 0.5
      ik_opt_iters: 500
    
    motion_gen_plan_cfg:
      enable_graph: False
      enable_graph_attempt: 4
      max_attempts: 10
      time_dilation_factor: 0.5
    
    warmup_cfg:
      enable_graph: True
      warmup_js_trajopt: False
    
  
  mpc: # mpc related default values (if not specified in the agent)
    mpc_solver_cfg:
      override_particle_file: projects_root/experiments/benchmarks/cfgs/particle_file_disk.yml # projects_root/projects/cfgs_by_robot/franka/mpc_single_arm/particle_mpc.yml
      use_cuda_graph: False 
      step_dt: 0.02
      use_cuda_graph_metrics: True
      self_collision_check: True
      collision_checker_type: MESH
      collision_cache: {"obb": 15, "mesh": 15}
      use_mppi: True
      use_lbfgs: False
      plot_costs: False # for debugging

  
  sim_robot_cfg: # default values for SimRobot class which is used to control the robot in simulation (if not specified by the agent)
    visualize_col_spheres: # visualize collision spheres of the robot (for debugging)
      is_on: False 
      ts_delta: 2 # int
      color: viz_color

    visualize_obj_bound_spheres: # show sphres bounding curobo obstacles (for debugging)
      is_on: False
      ts_delta: 2 # int
      

    visualize_plan: # visualize the planned trajectory of the robot (for debugging)
      is_on: False
      color: viz_color
      ts_delta: 1 # int
    
    visualize_mpc_ee_rollouts: # visualize the end-effector rollouts of the mpc (for debugging)
      is_on: False
      color: 'green'
      ts_delta: 1 # int

    visualize_col_pred:
      own: False
      own_color: 'blue'
      own_mean_only: True
      obs: False
      obs_color: 'red'
      
      ts_delta: 1 # int


  plan_pub_sub: # default values for publishing and subscribing to plans (if not specified by the agent)
    pub:
      is_on: True # meaning agent is publishing plans (so they can be used by other agents). If false, plan will be just the current state of the robot.
      dt: 1 # agent will publish plans every pub_dt steps or seconds
      is_dt_in_sec: False # if True, dt is in seconds, if False, pub_dt is in steps
      pr: 1.0 # probability of publishing the plans (0.0 to 1.0) *when* dt is reached.
    sub:
      is_on: True # meaning agent is subscribing to plans from other robots
      to: 'all' # meaning agent will subscribe to plans from all robots (except itself). 'to' can be a list of robot indices or 'all'. When agent is subscribed to plans, it will use the plans to plan its own steps (to make collision free steps).
      

    
# default (and only) values for environments (sim/real) 
env:
  simulation: # todo
    is_on: True
    # physics_dt=1.0/60.0 #
    # min_rendering_dt=1.0/60.0
    enable_gpu_dynamics: True
    init_app_settings:
      headless: null # set 'true' to run in headless mode
      width: "1920"
      height: "1080"
      # physics_dt: 0.03 # 0.016666666666666666 # 0.016666666666666666
      # rendering_dt: 0.03 # 0.016666666666666666 # 0.016666666666666666
      backend: "torch"
  
  real: # todo
    is_on: False
  
async: False
async_type: "step" # "step" or "loop"

pose_utils:
  seed: 0 # seed to sample the obstacle poses

sim_task:
  # task_type: 'manual' # reach/follow/manual (for debugging)
  task_type: CBSMP1 # 'CBSMP1' # reach/follow/manual/CBSMP_1 (for debugging)
  stats_cfg:
    collect: True # if True, the stats will be collected and saved to a file
    collect_list: [contact, goal_error]
    collect_dt: [1,5] # save stats every save_stats_dt steps
    verbose: [True,False]
    save_path: "stats.pkl" # path to save the stats
    save: True # if True, the stats will be saved to a file
  
  cfg:
    spacing: 0.125 # 0.25 # 0.15 # 
    noise: False
    robot_base_radius: 0.025
    add_walls: True
    
  # cfg:
    
sim_env:
  cfg:
    n_obs: 0
    obj_shape: 'sphere' # type of the obstacle ('cube' or 'sphere')
    max_dim: 0.1 # max dimension of the obstacle (in meters): side length for cube, diameter for sphere
    min_dim: 0.1 # min dimension of the obstacle (in meters): side length for cube, diameter for sphere
    volume_center_pos: [0, 0,0.5] # center position of the obstacle volume (xyz in world frame)
    volume_shape: 'sphere' # shape of the obstacle volume ('sphere' or 'box')
    volume_dim: 1 # dimension of the obstacle volume (radius for sphere, side length for box)
    obj_lin_vel: [0,0,0] # [0.2,0.2,0.2] # velocity of the obstacle (xyz in world frame)
    obj_rigid_body_enabled: False # if True, the obstacle will be a rigid body (for physics)
    
cu_agents:  # list of agents (each agent is a robot with a planner). Note: you can specify agent-specific values here for each of  the default values in this file (see above).
  # - robot:  curobo/src/curobo/content/configs/robot/ur5e.yml # curobo/src/curobo/content/configs/robot/franka.yml # dual_ur10e.yml
  #   planner: 'mpc' # mpc or cumotion
  #   base_pose: [0, 0.4, 0.0, 1, 0, 0, 0] # q values: [0, 0, 0, 1] = 180 deg rotation around z axis
  #   viz_color: 'purple'
    
    # mpc:
    #   mpc_solver_cfg:
    #     override_particle_file: projects_root/experiments/benchmarks/cfgs/particle_file.yml # projects_root/projects/cfgs_by_robot/franka/mpc_single_arm/particle_mpc.yml
    #     use_cuda_graph: False 
    #     step_dt: 0.03
    #     use_cuda_graph_metrics: True
    #     self_collision_check: True
    #     collision_checker_type: MESH
    #     collision_cache: {"obb": 15, "mesh": 15}
    #     use_mppi: True
    #     use_lbfgs: False
    #     plot_costs: True # for debugging


  # - robot:  curobo/src/curobo/content/configs/robot/ur5e.yml # curobo/src/curobo/content/configs/robot/franka.yml # dual_ur10e.yml
  #   planner: 'mpc' # mpc or cumotion
  #   base_pose: [0, -0.4, 0.0, 1, 0, 0, 0] # q values: [0, 0, 0, 1] = 180 deg rotation around z axis
  #   viz_color: 'orange'

  # - robot:  curobo/src/curobo/content/configs/robot/ur5e.yml # curobo/src/curobo/content/configs/robot/franka.yml # dual_ur10e.yml
  #   planner: 'mpc' # mpc or cumotion
  #   base_pose: [0.56, 0.0, 0.0, 1, 0, 0, 0] # q values: [0, 0, 0, 1] = 180 deg rotation around z axis
  #   viz_color: 'blue'
  
    

  # - robot:  curobo/src/curobo/content/configs/robot/dual_ur10e.yml # curobo/src/curobo/content/configs/robot/dual_ur10e.yml # dual_ur10e.yml
  #   planner: 'mpc' # mpc or cumotion
  #   base_pose: [0, 0.0, 0.0, 1, 0, 0, 0] # q values: [0, 0, 0, 1] = 180 deg rotation around z axis
  #   viz_color: 'purple'
    

  # - robot:  curobo/src/curobo/content/configs/robot/franka_mobile.yml # simple_disk.yml # franka_mobile.yml # curobo/src/curobo/content/configs/robot/franka.yml # dual_ur10e.yml
  #   planner: 'mpc' # mpc or cumotion 
  #   base_pose: [0, 0.0, 0.0, 1, 0, 0, 0]
  #   viz_color: 'purple'
  #   is_mobile: True
  #   mobile_base_link_subpath: "/panda_link0"

  - robot:  curobo/src/curobo/content/configs/robot/simple_disk_tiny.yml # simple_disk.yml # franka_mobile.yml # curobo/src/curobo/content/configs/robot/franka.yml # dual_ur10e.yml
    planner: 'mpc' # mpc or cumotion 
    base_pose: [1, 0.0, 0.0, 1, 0, 0, 0]
    viz_color: 'purple'
    is_mobile: True
    mobile_base_link_subpath: "/ee_link"
    cu_world_wrapper: # curoboworld collision wrapper
      verbosity: 4 # 0 to 4 (0 is no output, 4 is max output) 
      never_add: ['defaultGroundPlane'] # paths of objects that should never be added to the collision world (for example, robot itself or the robot target)
      never_update: [] # paths of objects that are added at the beginning of the simulation and should never be updated in the collision world (normally should set here the static objects, like the ground)
      


  - robot:  curobo/src/curobo/content/configs/robot/simple_disk_tiny.yml # simple_disk.yml # franka_mobile.yml # curobo/src/curobo/content/configs/robot/franka.yml # dual_ur10e.yml
    planner: 'mpc' # mpc or cumotion 
    base_pose: [0, 1.0, 0.0, 1, 0, 0, 0]
    viz_color: 'orange'
    is_mobile: True
    mobile_base_link_subpath: "/ee_link"
    cu_world_wrapper: # curoboworld collision wrapper
      verbosity: 4 # 0 to 4 (0 is no output, 4 is max output) 
      never_add: ['defaultGroundPlane'] # paths of objects that should never be added to the collision world (for example, robot itself or the robot target)
      never_update: [] # paths of objects that are added at the beginning of the simulation and should never be updated in the collision world (normally should set here the static objects, like the ground)
    
    sim_robot_cfg: # default values for SimRobot class which is used to control the robot in simulation (if not specified by the agent)
      visualize_col_spheres: # visualize collision spheres of the robot (for debugging)
        is_on: False 
        ts_delta: 2 # int
        color: 'green'

      visualize_obj_bound_spheres: # show sphres bounding curobo obstacles (for debugging)
        is_on: False
        ts_delta: 2 # int
        

      visualize_plan: # visualize the planned trajectory of the robot (for debugging)
        is_on: False
        color: 'green'
        ts_delta: 1 # int
      
      visualize_mpc_ee_rollouts: # visualize the end-effector rollouts of the mpc (for debugging)
        is_on: True
        color: 'orange'
        ts_delta: 1 # int

      visualize_col_pred:
        own: True
        own_color: 'blue'
        own_mean_only: True
        obs: True
        obs_color: 'red'
        
        ts_delta: 1 # int

    mpc: # mpc related default values (if not specified in the agent)
      mpc_solver_cfg:
        override_particle_file: projects_root/experiments/benchmarks/cfgs/particle_file_disk.yml # projects_root/projects/cfgs_by_robot/franka/mpc_single_arm/particle_mpc.yml
        use_cuda_graph: False 
        step_dt: 0.02
        use_cuda_graph_metrics: True
        self_collision_check: True
        collision_checker_type: MESH
        collision_cache: {"obb": 15, "mesh": 15}
        use_mppi: True
        use_lbfgs: False
        plot_costs: True # for debugging
    
  - robot:  curobo/src/curobo/content/configs/robot/simple_disk_tiny.yml # simple_disk.yml # franka_mobile.yml # curobo/src/curobo/content/configs/robot/franka.yml # dual_ur10e.yml
    planner: 'mpc' # mpc or cumotion 
    base_pose: [1, 0.0, 0.0, 1, 0, 0, 0]
    viz_color: 'purple'
    is_mobile: True
    mobile_base_link_subpath: "/ee_link"
    cu_world_wrapper: # curoboworld collision wrapper
      verbosity: 4 # 0 to 4 (0 is no output, 4 is max output) 
      never_add: ['defaultGroundPlane'] # paths of objects that should never be added to the collision world (for example, robot itself or the robot target)
      never_update: [] # paths of objects that are added at the beginning of the simulation and should never be updated in the collision world (normally should set here the static objects, like the ground)
      

    # # mpc_solver_cfg:
    # override_particle_file: projects_root/experiments/benchmarks/cfgs/particle_file.yml # projects_root/projects/cfgs_by_robot/franka/mpc_single_arm/particle_mpc.yml
    # use_cuda_graph: False 
    # step_dt: 0.03
    # use_cuda_graph_metrics: True
    # self_collision_check: False
    # collision_checker_type: MESH
    # collision_cache: {"obb": 15, "mesh": 15}h
    # use_mppi: True
    # use_lbfgs: False
    # plot_costs: True # for debugging
  
batch:
  # n: [1,31] # at index i set number of instances from agent_cfgs[i]
  n: [2,1,1] # [16,1,15]
  # base_poses: [] # list of poses for the agents
